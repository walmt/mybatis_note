<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间，作用就是对SQL进行分类化管理，理解SQL隔离
    注意：使用mapper代理方法开发，namespace有特殊重要的作用，namespace等于mapper接口地址
-->
<mapper namespace="cn.walmt.mapper.UserMapper">

    <!--开启本mapper的namespace下的二级缓存
    type：指定cache接口的实现类的类型，mybatis默认使用PerpetualCache
    要和ehcache整合，需要配置type为ehcache实现cache接口的类型
    -->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>

    <!--定义sql片段
    id：sql片段的唯一标识

    经验：是基于单表来定义sql片段，这样的话这个sql片段可重用性才高
    在sql片段中不要包括where
    -->
    <sql id="query_user_where">
        <if test="userCustom != null">
            <if test="userCustom.sex != null and userCustom.sex != ''">
                and u.sex = #{userCustom.sex}
            </if>
            <if test="userCustom.username != null and userCustom.username != ''">
                and u.username like '%${userCustom.username}%'
            </if>
        </if>
    </sql>

    <!--定义resultMap
    将select id id_, username username_ from user 和 user类中的属性作一个映射关系

    type：resultMap最终映射的Java对象类型，可以使用别名
    id：对resultMap的唯一标识
    -->
    <resultMap type="user" id="userResultMap">
        <!--id表示查询结果集中唯一标识
        column：查询出来的列名
        property：type指定的pojo类型中的属性名
        最终resultMap对column和property作一个映射关系（对应关系）
        -->
        <id column="id_" property="id"/>
        <!--
        result：对普通名映射定义
        column：查询出来的列名
        property：type指定的pojo类型中的属性名
        最终resultMap对column和property作一个映射关系（对应关系）
        -->
        <result column="username_" property="username"/>
    </resultMap>

    <!--使用resultMap进行输出映射
    resultMap：指定定义的resultMap的id，如果这个resultMap在其他的mapper文件，前边需要加namespace
    -->
    <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
        SELECT id id_, username username_ FROM USER u WHERE u.id = #{value}
    </select>

    <!--用户信息综合查询
    #{userCustom.sex}：取出pojo包装对象中性别值
    ${userCustom.username}：取出pojo包装对象中用户名称
    -->
    <select id="findUserList" parameterType="UserQueryVo" resultType="UserCustom">
        select * from user u
        <!--
        where可以自动去掉条件中第一个and
        -->
        <where>
            <!-- 引用sql片段的id，如果refid指定的id不在mapper文件中，需要前边加namespace -->
            <include refid="query_user_where"></include>
            <!-- 在这里还要引用其他的sql片段 -->
            <if test="ids != null">
                <!-- 使用foreach遍历传入的ids
                collection：指定输入对象集合属性
                item：每个遍历对象中
                open：开始遍历时要拼接的串
                close：结束便利时拼接的串
                separator：遍历的两个对象需要拼接的串
                -->
                <!-- 使用实现下边的sql拼接：
                and (id = 1 or id = 2 or id = 3)
                -->
                <foreach collection="ids" item="user_id" open="and(" close=")" separator="or">
                    <!-- 每个遍历需要拼接的串 -->
                    id=#{user_id}
                </foreach>

                <!-- 实现 and id in(1, 10, 16) 拼接 -->
                <!--<foreach collection="ids" item="user_id" open="and in(" close=")" separator=",">
                    #{user_id}
                </foreach>-->
            </if>
        </where>
    </select>

    <!--用户信息综合查询总数
    parameterType：指定输入类型和findUserList一样
    resultType：输出结果类型
    -->
    <select id="findUserCount" parameterType="UserQueryVo" resultType="int">
        select count(*) from user u
        <!--
        where可以自动去掉条件中第一个and
        -->
        <where>
            <if test="userCustom != null">
                <if test="userCustom.sex != null and userCustom.sex != ''">
                    and u.sex = #{userCustom.sex}
                </if>
                <if test="userCustom.username != null and userCustom.username != ''">
                    and u.username like '%${userCustom.username}%'
                </if>
            </if>
        </where>
    </select>

    <select id="findUserListByMap" parameterType="hashmap" resultType="UserCustom">
        select * from user u where u.sex = #{sex} and u.username like '%${username}%'
    </select>

    <!--在映射文件中配置很多SQL语句  -->
    <!--需求：通过id查询用户表的记录-->
    <!--通过select执行数据库查询
    id：标识映射文件中的SQL，称为statement的id
    将SQL语句封装到mappedStatement对象中，所以将id称为statement的id
    parameterType：指定输入参数的类型，这里制定int型
    #{}表示一个占位符号
    #{id}：其中的id表示接收输入的参数，参数名称就是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以是value或其他名称
    resultType：指定SQL输出结果的所映射的Java对象类型，select指定resultType表示将单条记录映射成Java对象。
    -->
    <select id="findUserById" parameterType="int" resultType="cn.walmt.pojo.User">
    SELECT * FROM USER u WHERE u.id = #{id}
    </select>

    <!--根据用户名称模糊查询用户信息，可能返回多条
    resultType：指定就是单条记录所映射的Java对象类型
    ${}：表示拼接SQL串，将接收到的参数的内容不加任何修饰拼接在SQL中。
    使用${}拼接SQL，可能会导致SQL注入
    ${value}：接收输入参数的内容，如果传入类型是简单类型，${}中只能用value
    -->
    <select id="findUserByName" parameterType="java.lang.String" resultType="cn.walmt.pojo.User">
        SELECT * FROM USER u WHERE u.username LIKE '%${value}%'
    </select>

    <!--添加用户
    parameterType：指定输入参数类型是pojo（包括用户信息）
    #{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值
    -->
    <insert id="insertUser" parameterType="cn.walmt.pojo.User">
        <!--
        将插入数据的主键返回，返回到user对象中

        SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用于自增主键

        keyProperty：将我们查询到主键值设置到parameterType指定对象的哪个属性
        order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
        resultType：指定SELECT LAST_INSERT_ID()结果的类型
        -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into user(username, birthday, sex, address) values ( #{username}, #{birthday}, #{sex}, #{address})
        <!--
        使用mysql的uuid()生成主键
        执行过程：
        首先通过uuid()得到主键，将主键设置到user对象的id属性中
        其次在insert执行时，从user对象中取出id属性值
        -->
        <!--<selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
            SELECT uuid()
        </selectKey>
        insert into user(id, username, birthday, sex, address) values (#{id}, #{username}, #{birthday}, #{sex}, #{address})-->
    </insert>

    <!-- 删除用户
    根据id删除用户，需要输入id值
    -->
    <delete id="deleteUser" parameterType="java.lang.Integer">
      delete from user where id= #{id}
    </delete>

    <!-- 更新用户
    分析：
    需要传入用户的id
    需要传入用户的更新信息
    parameterType指定user对象，包括id和更新信息，注意：id必须存在
    #{id}：从输入user对象中获取id属性值
    -->
    <update id="updateUser" parameterType="cn.walmt.pojo.User">
        update user u set u.username = #{username}, u.birthday = #{birthday}, u.sex = #{sex}, u.address = #{address} where id=${id}
    </update>
</mapper>
